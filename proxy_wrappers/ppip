#!/bin/bash

# as package-mgr (see description) but for pip
# additionally lets you define alternative pypi repository address and trusted hosts
# using other env variables: PYTHON_INDEX_URL, PYTHON_REPO_URL and PYTHON_TRUSTED_HOST

source ./common.sh

function ppip_wrapper {
  : '
    Pip Proxy Wrapper

    ShortDesc: A wrapper for the pip command that supports optional proxy and SSL certificate usage.

    Description:
    This function provides a way to execute pip commands with optional proxy settings, SSL certificate handling, 
    and custom Python package index configurations. It takes the pip command as the first parameter followed 
    by any additional parameters needed for pip. If proxy usage is enabled via the USE_PROXY environment variable, 
    it configures pip to use the specified proxy. If a base64-encoded SSL certificate is provided, it decodes 
    it to a temporary file for use with pip. The function also allows specifying a custom index URL, repository URL, 
    and trusted host.

    Parameters:
    - command: The pip command to be executed (e.g., install, uninstall).
    - additional_params: Additional parameters to pass to the pip command (optional).

    Environment Variables:
    - USE_PROXY: Set to "true" to enable proxy usage.
    - HTTPS_PROXY: The proxy URL to use if USE_PROXY is true.
    - CERT_BASE64_STRING: Base64-encoded SSL certificate string for verifying proxy connections (optional).
    - PYTHON_INDEX_URL: Custom Python package index URL (optional).
    - PYTHON_REPO_URL: Custom repository URL (optional).
    - PYTHON_TRUSTED_HOST: Trusted host for pip operations (optional).

    Returns:
    - 0: Success (pip command executed successfully)
    - 1: Failure (if the pip command fails)

    Example Usage:
    ppip_wrapper "install" "requests" --upgrade
    '
    local command="$1"
    shift
    local additional_params="$@"

    local pip_cmd="pip"
    local proxy_cmd=""
    local cert_cmd=""
    local index_url_cmd=""
    local repo_url_cmd=""
    local trusted_host_cmd=""

    if [ "${USE_PROXY,,}" == "true" ]; then
        if test_env_variable_defined CERT_BASE64_STRING; then
            # Create a temporary file for the cert
            TEMP_CERT_FILE=$(create_temp_file)
            echo "${CERT_BASE64_STRING}" | base64 -d > "${TEMP_CERT_FILE}"
            cert_cmd="--cert ${TEMP_CERT_FILE}"
        fi
        proxy_cmd="--proxy ${HTTPS_PROXY}"
    fi

    if test_env_variable_defined PYTHON_INDEX_URL; then
        index_url_cmd="--index ${PYTHON_INDEX_URL}"
    fi

    if test_env_variable_defined PYTHON_REPO_URL; then
        repo_url_cmd="--index-url ${PYTHON_REPO_URL}"
    fi

    if test_env_variable_defined PYTHON_TRUSTED_HOST; then
        trusted_host_cmd="--trusted-host ${PYTHON_TRUSTED_HOST}"
    fi

    # Execute pip with the appropriate options
    ${pip_cmd} ${proxy_cmd} ${cert_cmd} ${index_url_cmd} ${repo_url_command} ${trusted_host_cmd} ${command} ${additional_params}

    # Clean up temporary cert file if created
    if [ -n "${TEMP_CERT_FILE}" ]; then
        rm "${TEMP_CERT_FILE}"
    fi
}
